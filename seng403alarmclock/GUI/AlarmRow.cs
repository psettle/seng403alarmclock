using System;
using System.Windows;
using System.Windows.Controls;

namespace seng403alarmclock.GUI {
    /// <summary>
    /// A representation of an alarm for the GUI
    /// </summary>
    public class AlarmRow {
        /// <summary>
        /// The height of a row for the alarm
        /// </summary>
        private readonly static int rowHeight = 18;

        /// <summary>
        /// The width of the textbox for the time
        /// </summary>
        private readonly static int textWidth = 68;

        /// <summary>
        /// The width of the button for the row
        /// </summary>
        private readonly static int buttonWidth = 45;

        /// <summary>
        /// The margin on the button for the row
        /// </summary>
        private readonly static Thickness buttonMargin = new Thickness(68, 0, 0, 0);

        /// <summary>
        /// Modes for the row, this controls the text on the row and the types of events generated by the buttons
        /// </summary>
        private enum ModeType {Cancel, Dismiss};

        /// <summary>
        /// The alarm this row describes, this can be used to tell the source of a row
        /// </summary>
        private Alarm storedAlarm = null;

        /// <summary>
        /// The grid layout that holds contents of the row
        /// </summary>
        private Grid element = null;

        /// <summary>
        /// The stackpanel that holds all rows, this is only let while the row is rendered
        /// </summary>
        private StackPanel parent = null;

        /// <summary>
        /// The button on the row (this reference is kept so the text can be altered)
        /// </summary>
        private Button button = null;

        /// <summary>
        /// Which mode the row is in, control the types of event generated
        /// </summary>
        private ModeType mode = ModeType.Cancel;

        /// <summary>
        /// Creates the xaml structure for the row, but does not attach it to the gui
        /// </summary>
        /// <param name="alarm">
        /// The alarm at the base of the row, used for lookup later
        /// </param>
        public AlarmRow(Alarm alarm) {
            //assign the alarm
            this.storedAlarm = alarm;

            //create the base grid
            element = new Grid();
            element.Height = rowHeight;

            //create and attach the textbox
            TextBlock textBox = new TextBlock();
            textBox.HorizontalAlignment = HorizontalAlignment.Left;
            textBox.TextWrapping = TextWrapping.Wrap;
            textBox.Text = storedAlarm.GetAlarmTime().ToShortTimeString();
            textBox.Width = textWidth;
            element.Children.Add(textBox);

            //create and attach the button
            button = new Button();
            button.Click += ButtonClick; //!this assigns the event handler
            button.HorizontalAlignment = HorizontalAlignment.Left;
            button.Margin = buttonMargin;
            button.VerticalAlignment = VerticalAlignment.Top;
            button.Width = buttonWidth;
            element.Children.Add(button);
            //set the button to cancel mode (as a default)
            this.SetCancel();
        }

        /// <summary>
        /// Event triggered by the button on a row
        /// </summary>
        /// <param name="sender">?</param>
        /// <param name="e">?</param>
        private void ButtonClick(object sender, RoutedEventArgs e) {
            switch(this.mode) {
                case ModeType.Cancel:
                    GuiEventCaller.GetCaller().NotifyCancel(this.storedAlarm);
                    break;
                case ModeType.Dismiss:
                    GuiEventCaller.GetCaller().NotifyDismiss(this.storedAlarm);
                    break;
                default:
                    throw new NotImplementedException("Invalid ModeType");
            } 
        }

        /// <summary>
        /// Adds the row onto the gui
        /// </summary>
        /// <param name="parent">The stack panel from the gui that holds the rows</param>
        public void AddToGUI(StackPanel parent) {
            this.parent = parent;
            parent.Children.Add(element);
        }

        /// <summary>
        /// Removes the row from the gui
        /// </summary>
        public void RemoveFromGUI() {
            parent.Children.Remove(element);
            this.parent = null;
        }

        /// <summary>
        /// Changes the text on the alarm button
        /// </summary>
        /// <param name="buttonText"></param>
        private void AlterText(string buttonText) {
            button.Content = buttonText;
        }

        /// <summary>
        /// Gets the alarm that this row represents
        /// </summary>
        /// <returns>The alarm used to construct the object</returns>
        public Alarm getAlarm() {
            return this.storedAlarm;
        }


        /// <summary>
        /// Set the mode of the row to "Cancel", so it will generate cancel events
        /// </summary>
        public void SetCancel() {
            this.mode = ModeType.Cancel;
            this.AlterText("Cancel");
        }

        /// <summary>
        /// Sets the mode of the row to "Dismiss", so it will generate dismiss events
        /// </summary>
        public void SetDismiss() {
            this.mode = ModeType.Dismiss;
            this.AlterText("Dismiss");
        }

        /// <summary>
        /// Recheck the alarm attributes to change the GUI appropriately
        /// </summary>
        public void Update() {

        }
    }
}
